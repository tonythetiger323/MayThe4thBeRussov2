"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("then-fs");
var _ = require("lodash");
var Debug = require("debug");
var snyk_nodejs_lockfile_parser_1 = require("snyk-nodejs-lockfile-parser");
var snyk = require("../../");
var debug = Debug('snyk');
function inspect(root, targetFile, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var isLockFileBased, targetFileFullPath, isShrinkwrapPresent, isNodeModulesFolderPresent, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    isLockFileBased = targetFile.endsWith('yarn.lock');
                    targetFileFullPath = path.resolve(root, targetFile);
                    return [4 /*yield*/, fs.exists(path.join(path.dirname(targetFileFullPath), 'npm-shrinkwrap.json'))];
                case 1:
                    isShrinkwrapPresent = _c.sent();
                    if (!(getRuntimeVersion() < 6)) return [3 /*break*/, 3];
                    options.traverseNodeModules = true;
                    debug('Falling back to node_modules traversal for yarn.lock projects on Node < 6');
                    return [4 /*yield*/, fs.exists(path.join(root, 'node_modules'))];
                case 2:
                    isNodeModulesFolderPresent = _c.sent();
                    if (!isNodeModulesFolderPresent) {
                        // throw a custom error
                        throw new Error('Missing node_modules folder: we can\'t test ' +
                            'without dependencies.\nPlease run \'yarn install\' first.');
                    }
                    _c.label = 3;
                case 3:
                    if (!(isLockFileBased && !isShrinkwrapPresent && !options.traverseNodeModules)) return [3 /*break*/, 5];
                    _a = {
                        plugin: {
                            name: 'snyk-nodejs-lockfile-parser',
                            runtime: process.version,
                        }
                    };
                    return [4 /*yield*/, generateDependenciesFromLockfile(root, options, targetFile)];
                case 4: return [2 /*return*/, (_a.package = _c.sent(),
                        _a)];
                case 5:
                    _b = {
                        plugin: {
                            name: 'snyk-resolve-deps',
                            runtime: process.version,
                        }
                    };
                    return [4 /*yield*/, snyk.modules(root, Object.assign({}, options, { noFromArrays: true }))];
                case 6: 
                // Traverse node modules.
                return [2 /*return*/, (_b.package = _c.sent(),
                        _b)];
            }
        });
    });
}
exports.inspect = inspect;
function getRuntimeVersion() {
    return parseInt(process.version.slice(1).split('.')[0], 10);
}
function generateDependenciesFromLockfile(root, options, targetFile) {
    return __awaiter(this, void 0, void 0, function () {
        var lockFileFullPath, fullPath, manifestFileFullPath, _a, manifestFile, lockFile, _b, _c, _d, defaultManifestFileName, strictOutOfSync;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    lockFileFullPath = path.resolve(root, targetFile);
                    return [4 /*yield*/, fs.exists(lockFileFullPath)];
                case 1:
                    if (!(_e.sent())) {
                        throw new Error("Lockfile " + targetFile + " not found at location: " + lockFileFullPath);
                    }
                    fullPath = path.parse(lockFileFullPath);
                    manifestFileFullPath = path.resolve(fullPath.dir, 'package.json');
                    return [4 /*yield*/, fs.exists(manifestFileFullPath)];
                case 2:
                    if (!(_e.sent())) {
                        throw new Error("Manifest file yarn.lock not found at location: " + manifestFileFullPath);
                    }
                    if (!manifestFileFullPath && lockFileFullPath) {
                        throw new Error("Detected a lockfile at location: " + lockFileFullPath + "\nHowever the yarn.lock is missing!");
                    }
                    _c = (_b = Promise).all;
                    return [4 /*yield*/, fs.readFile(manifestFileFullPath, 'utf-8')];
                case 3:
                    _d = [
                        _e.sent()
                    ];
                    return [4 /*yield*/, fs.readFile(lockFileFullPath, 'utf-8')];
                case 4: return [4 /*yield*/, _c.apply(_b, [_d.concat([
                            _e.sent()
                        ])])];
                case 5:
                    _a = _e.sent(), manifestFile = _a[0], lockFile = _a[1];
                    defaultManifestFileName = path.relative(root, manifestFileFullPath);
                    strictOutOfSync = _.get(options, 'strictOutOfSync') !== 'false';
                    return [2 /*return*/, snyk_nodejs_lockfile_parser_1.buildDepTree(manifestFile, lockFile, options.dev, snyk_nodejs_lockfile_parser_1.LockfileType.yarn, strictOutOfSync, defaultManifestFileName)];
            }
        });
    });
}
//# sourceMappingURL=index.js.map